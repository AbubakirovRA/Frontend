Создайте класс Person, который имеет свойства name и age, а также
метод introduce(), который выводит сообщение с представлением
имени и возраста персоны.
const person = new Person("John", 25);
person.introduce(); // Вывод: My name is John and I'm 25 years old.

Вот пример кода на JavaScript, который создает класс Person с заданными свойствами и методом introduce():

class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  introduce() {
    console.log("My name is " + this.name + " and I'm " + this.age + " years old.");
  }
}

const person = new Person("John", 25);
person.introduce(); // Вывод: My name is John and I'm 25 years old.

В этом примере класс Person определяет конструктор с параметрами name и age, которые инициализируют свойства объекта. Метод introduce() выводит сообщение, содержащее представление имени и возраста персоны, используя значения свойств name и age. Создается экземпляр класса Person с именем "John" и возрастом 25, и вызывается метод introduce(), который выводит соответствующее сообщение в консоль.






Создайте класс BankAccount, который представляет банковский счет.
У него должны быть свойства accountNumber (номер счета) и balance
(баланс), а также методы deposit(amount) для пополнения счета и
withdraw(amount) для снятия денег со счета. Класс должен иметь
также статическое свойство bankName, которое содержит название
банка.
const account1 = new BankAccount("1234567890", 1000);
account1.deposit(500); // Вывод: Deposited 500 into account
1234567890. New balance: 1500
account1.withdraw(200); // Вывод: Withdrawn 200 from account
1234567890. New balance: 1300
account1.withdraw(1500); // Вывод: Insufficient funds in account
1234567890

Вот пример кода на JavaScript, который создает класс BankAccount с требуемыми свойствами и методами:


class BankAccount {
  constructor(accountNumber, balance) {
    this.accountNumber = accountNumber;
    this.balance = balance;
  }

  static bankName = "My Bank";

  deposit(amount) {
    this.balance += amount;
    console.log("Deposited " + amount + " into account " + this.accountNumber + ". New balance: " + this.balance);
  }

  withdraw(amount) {
    if (amount <= this.balance) {
      this.balance -= amount;
      console.log("Withdrawn " + amount + " from account " + this.accountNumber + ". New balance: " + this.balance);
    } else {
      console.log("Insufficient funds in account " + this.accountNumber);
    }
  }
}

const account1 = new BankAccount("1234567890", 1000);
account1.deposit(500); // Вывод: Deposited 500 into account 1234567890. New balance: 1500
account1.withdraw(200); // Вывод: Withdrawn 200 from account 1234567890. New balance: 1300
account1.withdraw(1500); // Вывод: Insufficient funds in account 1234567890
В этом примере класс BankAccount определяет конструктор, который инициализирует свойства accountNumber и balance объекта. Также класс имеет статическое свойство bankName, которое содержит название банка.

Метод deposit(amount) увеличивает баланс счета на указанную сумму и выводит сообщение о пополнении счета и новом балансе.

Метод withdraw(amount) проверяет, достаточно ли средств на счете для снятия указанной суммы. Если сумма не превышает баланс, то сумма снимается со счета и выводится сообщение о списании и новом балансе. Если же сумма превышает баланс, то выводится сообщение о недостатке средств.

Создается экземпляр класса BankAccount с указанным номером счета и начальным балансом. Затем вызываются методы deposit() и withdraw() для пополнения и снятия денег со счета, и выводятся соответствующие сообщения в консоль.






Напишите рекурсивную функцию sumDigits, которая принимает
положительное целое число в качестве аргумента и возвращает
сумму его цифр.
// Пример использования:
console.log(sumDigits(123)); // Ожидаемый результат: 6 (1 + 2 + 3)
console.log(sumDigits(456789)); // Ожидаемый результат: 39 (4 + 5 + 6
+ 7 + 8 + 9)

Вот пример рекурсивной функции sumDigits, которая вычисляет сумму цифр положительного целого числа:


function sumDigits(number) {
  if (number < 10) {
    return number;
  } else {
    return number % 10 + sumDigits(Math.floor(number / 10));
  }
}

console.log(sumDigits(123)); // Ожидаемый результат: 6 (1 + 2 + 3)
console.log(sumDigits(456789)); // Ожидаемый результат: 39 (4 + 5 + 6 + 7 + 8 + 9)
В этой функции мы проверяем, если число меньше 10, то оно само является суммой своих цифр, и мы возвращаем это число. В противном случае, мы берем остаток от деления числа на 10 (это даст нам последнюю цифру числа), и прибавляем его к результату рекурсивного вызова sumDigits для оставшихся цифр числа, полученных путем деления числа на 10 с округлением вниз (Math.floor(number / 10)).

Таким образом, функция рекурсивно разбивает число на его цифры и вычисляет их сумму.